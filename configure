#!/bin/sh
#

#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2015--2017, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


# define usage function
usage () {
  printf "\`configure' configures kim-api to adapt to many kinds of systems.\n"
  printf "\n"
  printf "usage: $0 [OPTION]... [VAR=VALUE]...\n"
  printf "\n"
  printf "To assign environment variables (e.g., CC, CFLAGS...), %s\n" \
         "specify them as"
  printf "VAR=VALUE.  See below for descriptions of some of the useful %s\n" \
         "variables."
  printf "\n"
  printf "Defaults for the options are specified in brackets.\n"
  printf "\n"
  printf "Configuration:\n"
  printf "  -h, --help              display this help and exit\n"
  printf "  -V, --version           display version information and exit\n"
  printf "  -q, --quiet, --silent   do not print \`checking ...' messages\n"
  printf "  -n, --no-create         do not create output files\n"
  #printf "      --srcdir=DIR        find the sources in DIR [configure %s\n" \
  #       "dir or `..']"
  printf "\n"
  printf "System Parameters:\n"
  printf "  --compiler-suite=ARG    Compilers to use for build: \`GCC' %s\n" \
         "or \`INTEL'"
  printf "  --system-linker=ARG     System linker: \`linux', \`freebsd', %s\n" \
         "or \`darwin'"
  printf "  --system-arch=ARG       System architecture: \`32bit' or %s\n" \
         "\`64bit'"
  printf "  --link-type=ARG         linking type: [\`dynamic-load']\n"
  printf "  --build-verbosity=ARG   Build verbosity: [\`quiet'] or \`full'\n"
  printf "\n"
  printf "Installation directories:\n"
  printf "  --prefix=PREFIX         install architecture-independent %s\n" \
         "files in PREFIX"
  printf "                          [/usr/local]\n"
  printf "  --exec-prefix=EPREFIX   install architecture-dependent files %s\n" \
         "in EPREFIX"
  printf "                          [PREFIX]\n"
  printf "\n"
  printf "By default, \`make install' will install all the files in\n"
  printf "\`/usr/local/bin', \`/usr/local/lib' etc.  You can specify\n"
  printf "an installation prefix other than \`/usr/local' using \`--prefix',\n"
  printf "for instance \`--prefix=\${HOME}/local'.\n"
  printf "\n"
  printf "For better control, use the options below.\n"
  printf "\n"
  printf "Fine tuning of the installation directories:\n"
  printf "  --bindir=DIR            user executables [EPREFIX/bin]\n"
  printf "  --libdir=DIR            object code libraries [EPREFIX/lib]\n"
  printf "  --includedir=DIR        C and Fortran header files %s\n" \
         "[PREFIX/include]"
  printf "\n"
  printf "Program names:\n"
  printf "  --package-name=PKGNAME library and utility name prefix [kim-api]\n"
  printf "  --user-config-file-dir-name=DIRNAME config file directory %s\n" \
         "name [.PKGNAME]"
  printf "\n"
  printf "Some influential environment variables:\n"
  printf "  CXX         C++     compiler command\n"
  printf "  CXXFLAGS    C++     compiler flags\n"
  printf "  CC          C       compiler command\n"
  printf "  CFLAGS      C       compiler flags\n"
  printf "  FC          Fortran compiler command\n"
  printf "  FFLAGS      Fortran compiler flags\n"
  printf "  LD                  linker command\n"
  printf "  LDFLAGS     linker flags, e.g. -L<lib dir> if you have %s\n" \
         "libraries in a"
  printf "              nonstandard directory <lib dir>\n"
  printf "  LDLIBS      libraries to pass to the linker, e.g. -l<library>\n"
  printf "\n"
  printf "Use these variables to override the choices made by \`configure'\n"
  printf "or to help it to find libraries and programs with nonstandard\n"
  printf "names/locations\n"
  printf "\n"
  printf "Report bugs to <openkim@googlegroups.com>.\n"
  printf "kim-api home page: <https://openkim.org/kim-api>.\n"
}

# define utility funcitons
stripOption()
{
  printf -- "$1" | sed -e 's/[^=]*=//'
}


# set initial variable values
quiet='no'
noCreate='no'
compilerSuite=''
systemLinker=''
systemArch=''
linkType='dynamic-load'
buildVerbosity='quiet'
packageName=''
userConfigFileDirName=''
prefix=''
execPrefix=''
bindir=''
libdir=''
includedir=''
makeVariables=''


# save command line options
commandLineOptions=`for a in "$@"; do printf '"%s" ' "$a"; done`
# process command line arguments
while test $# -gt 0
do
  case $1 in
    -h|--help)
      usage
      exit 0
      ;;
    -V|--version)
      printf "kim-api \`configure', part of the kim-api.git repository.\n"
      exit 0
      ;;
    -q|--quiet|--silent)
      quiet='yes'
      ;;
    -n|--no-create)
      noCreate='yes'
      ;;
    --compiler-suite=*)
      case `stripOption $1` in
        GCC)
          compilerSuite='GCC'
          ;;
        INTEL)
          compilerSuite='INTEL'
          ;;
        *)
          printf "Unknown value for \`--compiler-suite=' argument.\n"
          usage
          exit 1
      esac
      ;;
    --system-linker=*)
      case `stripOption $1` in
        linux)
          systemLinker='linux'
          ;;
        freebsd)
          systemLinker='freebsd'
          ;;
        darwin)
          systemLinker='darwin'
          ;;
        *)
          printf "Unknown value for \`--system-linker=' argument.\n"
          usage
          exit 2
      esac
      ;;
    --system-arch=*)
      case `stripOption $1` in
        32bit)
          systemArch='32bit'
          ;;
        64bit)
          systemArch='64bit'
          ;;
        *)
          printf "Unknown value for \`--system-arch=' argument.\n"
          usage
          exit 3
      esac
      ;;
    --link-type=*)
      case `stripOption $1` in
        dynamic-load)
          linkType='dynamic-load'
          ;;
        *)
          printf "Unknown value for \`--link-type=' argument.\n"
          usage
          exit 4
      esac
      ;;
    --build-verbosity=*)
      case `stripOption $1` in
        quiet)
          buildVerbosity='quiet'
          ;;
        full)
          buildVerbosity='full'
          ;;
        *)
          printf "Unknown value for \`--build-verbosity=' argumnet.\n"
          usage
          exit 5
      esac
      ;;
    --prefix=*)
      prefix=`stripOption $1`
      ;;
    --exec-prefix=*)
      execPrefix=`stripOption $1`
      ;;
    --bindir=*)
      binDir=`stripOption $1`
      ;;
    --libdir=*)
      libDir=`stripOption $1`
      ;;
    --includedir=*)
      includeDir=`stripOption $1`
      ;;
    --*dir=*)
      # ignore any other directory arguments silently
      ;;
    --package-name=*)
      packageName=`stripOption $1`
      ;;
    --user-config-file-dir-name=*)
      userConfigFileDirName=`stripOption $1`
      ;;
    [a-zA-Z]*=*)
      if test "x${makeVariables}" = "x"; then
        makeVariables="$1"
      else
        makeVariables=`printf "%s\n%s" "${makeVariables}" "$1"`
      fi
      ;;
    --with-*|--enable-*)
      # ignore any such arguments silently
      ;;
    *)
      usage
      exit 0
  esac
  shift
done


# discover the configuration
#
# find compilerSuite
if test "x" = "x${compilerSuite}"; then
  if test "no" = "${quiet}"; then
    printf "checking for the GNU Compiler Suite (gcc, g++, gfortran)... "
  fi
  (gcc --version > /dev/null 2>&1 && \
     g++ --version > /dev/null 2>&1 && \
     gfortran --version > /dev/null 2>&1)
  if test $? -eq 0; then
    compilerSuite=GCC
    if test "no" = "${quiet}"; then
      printf "yes\n"
    fi
  else
    if test "no" = "${quiet}"; then
      printf "no\n"
      printf "checking for the INTEL Compiler Suite (icc, icpc, ifort)... "
    fi
    (icc --version > /dev/null 2>&1 && \
       icpc --version > /dev/null 2>&1 && \
       ifort --version > /dev/null 2>&1)
    if test $? -eq 0; then
      compilerSuite=INTEL
      if test "no" = "${quiet}"; then
        printf "yes\n"
      fi
    else
      if test "no" = "${quiet}"; then
        printf "no\n"
      fi
      printf "unable to identify a complete compiler suite.  Exiting.\n"
      exit
    fi
  fi
else
  if test "no" = "${quiet}"; then
    printf "using user specified compiler suite... ${compilerSuite}\n"
  fi
fi

# find systemLinker
if test "x" = "x${systemLinker}"; then
  if test "no" = "${quiet}"; then
    printf "checking for the system linker... "
  fi
  case `uname -s` in
    Linux)
      systemLinker=linux
      if test "no" = "${quiet}"; then
        printf "Linux\n"
      fi
      ;;
    Darwin)
      systemLinker=darwin
      if test "no" = "${quiet}"; then
        printf "Darwin\n"
      fi
      ;;
    FreeBSD) # is this the right string?
      systemLinker=freebsd
      if test "no" = "${quiet}"; then
        printf "FreeBSD\n"
      fi
      ;;
    *)
      if test "no" = "${quiet}"; then
        printf "unknown.\n"
      fi
      printf "unable to identify a known system linker. Exiting.\n"
      exit
  esac
else
  if test "no" = "${quiet}"; then
    printf "using user specified system linker... ${systemLinker}\n"
  fi
fi

# find systemArch
if test "x" = "x${systemArch}"; then
  if test "no" = "${quiet}"; then
    printf "checking for the system architecture... "
  fi
  case `uname -m` in
    x86_64)
      systemArch=64bit
      if test "no" = "${quiet}"; then
        printf "64bit\n"
      fi
      ;;
    i686|i386)
      systemArch=32bit
      if test "no" = "${quiet}"; then
        printf "32bit\n"
      fi
      ;;
    *)
      if test "no" = "${quiet}"; then
        printf "unknown.\n"
      fi
      printf "unable to identify a known system architecture. Exiting.\n"
      exit
  esac
else
  if test "no" = "${quiet}"; then
    printf "using user specified system architecture... ${systemArch}\n"
  fi
fi

# report link type being used
if test "no" = "${quiet}"; then
  printf "using link type of... ${linkType}\n"
fi

# create config.status
flnm=./config.status
printf "configure: creating ${flnm}\n"
#
printf '#! /bin/sh\n' > $flnm
printf '# Generated by configure using the command line:\n' >> $flnm
printf '# $ ./configure '"${commandLineOptions}"'\n' >> $flnm
printf '# Run this file to recreate the current configuration.\n' >> $flnm
printf '\n' >> $flnm
printf 'flnm=./Makefile.KIM_Config\n' >> $flnm
printf 'printf "config.status: creating ${flnm}\\n"\n' >> $flnm
printf 'printf "# Generated by config.status.\\n" > $flnm\n' >> $flnm
printf 'printf "# do not edit.\\n" >> $flnm\n' >> $flnm
printf 'printf "\\n" >> $flnm\n' >> $flnm
printf 'printf "KIM_DIR = ${PWD}\\n" >> $flnm\n' >> $flnm
printf 'printf "\\n" >> $flnm\n' >> $flnm
printf 'printf "KIM_COMPILERSUITE = '${compilerSuite}'\\n" >> $flnm\n' \
       >> $flnm
printf 'printf "KIM_SYSTEMLINKER = '${systemLinker}'\\n" >> $flnm\n' >> $flnm
printf 'printf "KIM_SYSTEMARCH = '${systemArch}'\\n" >> $flnm\n' >> $flnm
printf 'printf "KIM_LINK = '${linkType}'\\n" >> $flnm\n' >> $flnm
printf 'printf "\\n" >> $flnm\n' >> $flnm
printf 'printf %s\n' \
       '"include \$(KIM_DIR)/build_system/Makefile.LoadDefaults\\n" >> $flnm'\
       >> $flnm
printf 'printf "KIM_BUILD_VERBOSITY = '${buildVerbosity}'\\n" >> $flnm\n' \
       >> $flnm
printf 'printf "\\n" >> $flnm\n' >> $flnm
if test "x" != "x${packageName}"; then
  printf 'printf "package_name = '${packageName}'\\n" >> $flnm\n' >> $flnm
fi
if test "x" != "x${userConfigFileDirName}"; then
  printf 'printf "user_config_file_dir_name = '${userConfigFileDirName}'%s\n'\
         '\\n" >> $flnm' >> $flnm
fi
if test "x" != "x${prefix}"; then
  printf 'printf "prefix = '${prefix}'\\n" >> $flnm\n' >> $flnm
fi
if test "x" != "x${execPrefix}"; then
  printf 'printf "execprefix = '${execPrefix}'\\n" >> $flnm\n' >> $flnm
fi
if test "x" != "x${bindir}"; then
  printf 'printf "bindir = '${bindir}'\\n" >> $flnm\n' >> $flnm
fi
if test "x" != "x${libdir}"; then
  printf 'printf "libdir = '${libdir}'\\n" >> $flnm\n' >> $flnm
fi
if test "x" != "x${includedir}"; then
  printf 'printf "includedir = '${includedir}'\\n" >> $flnm\n' >> $flnm
fi
if test "x" != "x${makeVariables}"; then
  printf 'printf "'"${makeVariables}"'\\n" >> $flnm\n' >> $flnm
fi
printf 'printf "\\n" >> $flnm\n' >> $flnm
printf 'printf %s\n' \
       '"include \$(KIM_DIR)/build_system/Makefile.Generic\\n" >> $flnm' \
       >> $flnm

if test "no" = "${noCreate}"; then
  # execute $flnm
  . $flnm
fi
