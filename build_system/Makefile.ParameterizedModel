#
# CDDL HEADER START
#
# The contents of this file are subject to the terms of the Common Development
# and Distribution License Version 1.0 (the "License").
#
# You can obtain a copy of the license at
# http://www.opensource.org/licenses/CDDL-1.0.  See the License for the
# specific language governing permissions and limitations under the License.
#
# When distributing Covered Code, include this CDDL HEADER in each file and
# include the License file in a prominent location with the name LICENSE.CDDL.
# If applicable, add the following below this CDDL HEADER, with the fields
# enclosed by brackets "[]" replaced with your own identifying information:
#
# Portions Copyright (c) [yyyy] [name of copyright owner]. All rights reserved.
#
# CDDL HEADER END
#

#
# Copyright (c) 2013--2017, Regents of the University of Minnesota.
# All rights reserved.
#
# Contributors:
#    Ryan S. Elliott
#

#
# Release: This file is part of the kim-api.git repository.
#


# sanity checks
ifndef KIM_DIR
   $(error Make variable KIM_DIR must be defined)
endif
include $(KIM_DIR)/$(builddir)/Makefile.SanityCheck

# Clean up variables
MODEL_NAME := $(strip $(MODEL_NAME))
MODEL_DRIVER_NAME := $(strip $(MODEL_DRIVER_NAME))

# Set SO variables
%.so: SO_IS_MODEL:=true
%.so: SO_IS_PARAMETERIZED:=true

# Set defines
KIMDEFINES = $(KIM_DEFINE_VALUES)

MODEL_BUILD_TARGET := lib$(MODEL_LIB).a
MODEL_BUILD_TARGET := $(patsubst %.a,%.so, $(MODEL_BUILD_TARGET))

# Add this file and item makefile to makefiles list
KIM_MAKE_FILES += $(KIM_DIR)/$(builddir)/Makefile.ParameterizedModel Makefile

.PHONY: clean install installdirs uninstall kim-item-type model-name model-driver-name

all: $(MODEL_BUILD_TARGET)

# Find the driver files
ifeq ($(srcdir),$(KIM_DIR)) # INSTALLED
   COLLECTIONS_INFO = $(srcdir)/bin/$(full_package_name)-collections-info
else
   COLLECTIONS_INFO = $(srcdir)/utils/$(full_package_name)-collections-info
endif
#
driver_location = $(shell $(COLLECTIONS_INFO) model_drivers find $(MODEL_DRIVER_NAME) 2> /dev/null| sed -e 's/[^ ]* \([^ ]*\).*/\1/')
ifeq (,$(driver_location))
   ifeq (,$(MAKECMDGOALS))  # empty goal, in this case, means stop here
      MAKECMDGOALS=empty-so-stop
   endif
   ifeq (,$(filter-out clean kim-item-type model-name model-driver-name,$(MAKECMDGOALS)))
      # all good
   else
     # check for driver in CWD-collection of parent directory
     driver_location = $(shell cd ..; $(COLLECTIONS_INFO) model_drivers find $(MODEL_DRIVER_NAME) 2> /dev/null| sed -e 's/[^ ]* \([^ ]*\).*/\1/')
     ifeq (,$(driver_location))
       $(error Model Driver, $(MODEL_DRIVER_NAME), not found)
     else
       # driver_location will have ./ at beginning, change it to ../
       driver_location:=.$(driver_location)
     endif
  endif
endif

paramfile_list =  $(sort $(strip $(filter PARAM_FILE_%_NAME,$(.VARIABLES))))

paramfile_num_list = $(strip $(subst _NAME,,$(subst PARAM_FILE_,,$(paramfile_list))))
paramfile_name_list = $(strip $(foreach paramfl,$(paramfile_list), $($(paramfl))))
num_paramfiles = $(words $(paramfile_num_list))

PARAM_MODEL_NAME = parameterized-model
.INTERMEDIATE: $(PARAM_MODEL_NAME).cpp
$(PARAM_MODEL_NAME).cpp: $(KIM_DIR)/$(builddir)/parameterized_model.cpp $(paramfile_name_list) $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
	@printf "  Using ModelDriver in... $(driver_location)/$(MODEL_DRIVER_NAME).\n"
	$(QUELL)cat /dev/null > $@
	$(QUELL)$(foreach flnum,$(paramfile_num_list),\
            fl_name=$(PARAM_FILE_$(flnum)_NAME);\
            varnm=`printf "$${fl_name}" | \
                       sed -e 's/^\([[:digit:]]\)/__\1/' -e 's/[^[:alnum:]]/_/g'` && \
                xxd -i $${fl_name} | \
                sed -e "s/$${varnm}/paramfile_$(flnum)/g" >> $@; \
         )
        # make sed script
	$(QUELL)printf "/PARAMFILE_POINTERS_GO_HERE;/ {\n" > tmp-sed-script
	$(QUELL)$(foreach flnum,$(paramfile_num_list),printf 'i\\\n' >> tmp-sed-script; printf "   paramfile_strings[$(flnum)-1] = paramfile_$(flnum);\n" >> tmp-sed-script;)
	$(QUELL)printf "d\n" >> tmp-sed-script
	$(QUELL)printf "}\n" >> tmp-sed-script
	$(QUELL)printf "/PARAMFILE_LENS_GO_HERE;/ {\n" >> tmp-sed-script
	$(QUELL)$(foreach flnum,$(paramfile_num_list),printf 'i\\\n' >> tmp-sed-script; printf "   paramfile_strings_len[$(flnum)-1] = paramfile_$(flnum)_len;\n" >> tmp-sed-script;)
	$(QUELL)printf "d\n" >> tmp-sed-script
	$(QUELL)printf "}\n" >> tmp-sed-script
        # create actual model code to call model driver
	$(QUELL)cat $(KIM_DIR)/$(builddir)/parameterized_model.cpp |                         \
                sed -e "s,MODEL_DRIVER_NAME_STR,$(MODEL_DRIVER_NAME),g"                      \
                    -e "s,MODEL_DRIVER_LIBNAME_STR,lib$(MODEL_DRIVER_LIB),g"                 \
                    -e "s,MODEL_NAME_STR,$(MODEL_NAME),g"                                    \
                    -e "s,VERSION_FULL_STR,$(VERSION_FULL),g"                                \
                    -e "s,NUM_PARAMFILES,$(num_paramfiles),g"                                \
                    -f tmp-sed-script                                                  >> $@
	$(QUELL)rm -f tmp-sed-script

lib$(MODEL_LIB).a: lib$(MODEL_LIB_BUILD).a
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).a" "lib$(MODEL_LIB).a"

lib$(MODEL_LIB).so: lib$(MODEL_LIB_BUILD).so
	@printf "Creating... $@.\n"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "lib$(MODEL_LIB).so"

lib$(MODEL_LIB_BUILD).a: $(PARAM_MODEL_NAME).o
	@printf "Creating... $@.\n"
	$(QUELL)ar rcs $@ $(PARAM_MODEL_NAME).o

$(EXPORT_LIST_NAME): $(KIM_MAKE_FILES)
	@printf "Creating... intermediate file... $@.\n"
ifeq (darwin, $(KIM_SYSTEMLINKER))
	$(QUELL)printf "_$(MODEL_NAME)_init_pointer\n"             > $@
	$(QUELL)printf "_$(MODEL_NAME)_compiled_with_version\n"   >> $@
	$(QUELL)printf "_$(MODEL_NAME)_language\n"                >> $@
else # everything else (linux and freebsd)
	$(QUELL)printf "{\n"                                                > $@
	$(QUELL)printf "   global:\n"                                       >> $@
	$(QUELL)printf "           $(MODEL_NAME)_init_pointer;\n"           >> $@
	$(QUELL)printf "           $(MODEL_NAME)_compiled_with_version;\n"  >> $@
	$(QUELL)printf "           $(MODEL_NAME)_language;\n"               >> $@
	$(QUELL)printf "\n"                                                 >> $@
	$(QUELL)printf "   local: *;\n"                                     >> $@
	$(QUELL)printf "};\n"                                               >> $@
endif

kim-item-type:
	@printf "ParameterizedModel"

model-name:
	@printf "$(MODEL_NAME)"

model-driver-name:
	@printf "$(MODEL_DRIVER_NAME)"

clean:
	@printf "Cleaning... Model.......... $(MODEL_NAME).\n"
	$(QUELL)rm -f lib$(LIB_ROOT)* .lib$(LIB_ROOT)* \
                      $(addprefix $(PARAM_MODEL_NAME).,o cpp) \
                      $(EXPORT_LIST_NAME)

install_parammodeldir = $(dest_package_dir)/$(modelsdir)/$(MODEL_NAME)

installdirs:
	$(QUELL)fl="$(install_parammodeldir)" && \
                if test -d "$$fl"; then rm -rf "$$fl"; fi && \
                $(INSTALL_PROGRAM) -d -m 0755  "$$fl"

install: DOT:=$(shell if test -f ".lib$(MODEL_LIB_BUILD).so"; then printf "."; fi)
install: all installdirs
	@printf "Installing...($(dest_package_dir))................. Model.......... $(MODEL_NAME)"
	@printf ".\n"
	$(QUELL)if test \( x"$(driver_location)" != x"$(srcdir)/$(modeldriversdir)" \); then             \
                  printf "*******************************************************************************\n"; \
                  printf "*******      Cannot install a Parameterized Model whose associated      *******\n"; \
                  printf "*******   Model Driver has not been installed.  Please (1) install the  *******\n"; \
                  printf "*******    Model Driver, (2) remove the Model Driver source directory,  *******\n"; \
                  printf "*******                      and (3) try again.                         *******\n"; \
                  printf "*******************************************************************************\n"; \
                  false; else true;                                                                           \
                fi
	$(QUELL)$(INSTALL_PROGRAM) -m 0755 "$(DOT)lib$(MODEL_LIB_BUILD).so" "$(install_parammodeldir)/lib$(MODEL_LIB_BUILD).so"
	$(QUELL)ln -fs "lib$(MODEL_LIB_BUILD).so" "$(install_parammodeldir)/lib$(MODEL_LIB).so"

uninstall:
	@printf "Uninstalling...($(dest_package_dir))................. Model.......... $(MODEL_NAME)"
	@printf ".\n"
	$(QUELL)fl="$(install_parammodeldir)" && if test -d "$$fl"; then rm -rf "$$fl"; fi
